# Default values for pyroscope.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

pyroscope:
  structuredConfig:
    storage:
      backend: s3
      s3:
        endpoint: host.docker.internal:9000
        bucket_name: grafana-pyroscope-data
        access_key_id: default
        secret_access_key: mypswd123
        region: us-east-1
        insecure: true # minio/localstack = true, AWS S3 = false

  podAnnotations:
    profiles.grafana.com/memory.scrape: "true"
    profiles.grafana.com/memory.port_name: http2
    profiles.grafana.com/cpu.scrape: "true"
    profiles.grafana.com/cpu.port_name: http2
    profiles.grafana.com/goroutine.scrape: "true"
    profiles.grafana.com/goroutine.port_name: http2

  extraArgs:
    store-gateway.sharding-ring.replication-factor: "3"

  components:
    querier:
      kind: Deployment
      replicaCount: 1
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 2
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 60
      resources:
        requests:
          cpu: 80m
          memory: 200Mi
        limits:
          cpu: 100m
          memory: 256Mi

    query-frontend:
      kind: Deployment
      replicaCount: 1
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 2
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 60
      resources:
        requests:
          cpu: 80m
          memory: 200Mi
        limits:
          cpu: 100m
          memory: 256Mi

    query-scheduler:
      kind: Deployment
      replicaCount: 1
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 2
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 60
      resources:
        requests:
          cpu: 80m
          memory: 200Mi
        limits:
          cpu: 100m
          memory: 256Mi

    distributor:
      kind: Deployment
      replicaCount: 1
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 2
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 60
      resources:
        requests:
          cpu: 80m
          memory: 200Mi
        limits:
          cpu: 100m
          memory: 256Mi

    # ! This is statefulset, so it can't be scaled up and down automatically
    ingester:
      kind: StatefulSet
      replicaCount: 1
      terminationGracePeriodSeconds: 600
      resources:
        requests:
          cpu: 80m
          memory: 200Mi
        limits:
          cpu: 100m
          memory: 256Mi

    # ! This is statefulset, so it can't be scaled up and down automatically
    compactor:
      kind: StatefulSet
      replicaCount: 1
      terminationGracePeriodSeconds: 1200
      persistence:
        enabled: false
      resources:
        requests:
          cpu: 80m
          memory: 200Mi
        limits:
          cpu: 100m
          memory: 256Mi

    # ! This is statefulset, so it can't be scaled up and down automatically
    store-gateway:
      kind: StatefulSet
      replicaCount: 1
      persistence:
        # The store-gateway needs not need persistent storage, but we still run it as a StatefulSet
        # This is to avoid having blocks of data being
        enabled: false
      resources:
        requests:
          cpu: 80m
          memory: 200Mi
        limits:
          cpu: 100m
          memory: 256Mi
      readinessProbe:
        # The store gateway can be configured to wait on startup for ring stability to be reached before it becomes
        # ready. See the `store-gateway.sharding-ring.wait-stability-min-duration` server argument for more information.
        #
        # Depending on this flag and the number of tenants + blocks that need to be synced on startup, pods can take
        # some time to become ready. This value can be used to ensure Kubernetes waits long enough and reduce errors.
        initialDelaySeconds: 60

    tenant-settings:
      kind: Deployment
      replicaCount: 1
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 2
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 60
      resources:
        requests:
          cpu: 40m
          memory: 50Mi
        limits:
          cpu: 50m
          memory: 64Mi

    ad-hoc-profiles:
      kind: Deployment
      replicaCount: 1
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 2
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 60
      resources:
        requests:
          cpu: 40m
          memory: 50Mi
        limits:
          cpu: 50m
          memory: 64Mi

tracing:
  profiling_enabled: true

alloy:
  enabled: false

minio:
  enabled: false

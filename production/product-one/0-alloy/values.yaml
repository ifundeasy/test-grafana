replicaCount: 1

controller:
  type: deployment

image:
  repository: grafana/alloy
  tag: latest
  pullPolicy: IfNotPresent

alloy:
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  extraPorts:
    - name: grpc-otlp
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: http-otlp
      port: 4318
      targetPort: 4318
      protocol: TCP
    - name: metrics
      port: 8888
      targetPort: 8888
      protocol: TCP

  hostAliases:
    - ip: "10.140.0.104"
      hostnames:
        - "loki.local"
        - "tempo.local"
        - "mimir.local"

  configMap:
    create: true
    name: alloy-config
    content: |
      livedebugging {
        enabled = true
      }

      logging {
        level  = "info"
        format = "logfmt"
      }

      discovery.kubernetes "pods" {
        role = "pod"

        namespaces {
          names = ["product-one"]
        }
      }

      discovery.relabel "pod_relabel" {
        targets = discovery.kubernetes.pods.targets

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "ReplicaSet/(.+)"
          target_label  = "__tmp_replicaset_name"
          replacement   = "${1}"
        }
        
        rule {
          source_labels = ["__tmp_replicaset_name"]
          regex         = "(.+)-[a-z0-9]+"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "Deployment/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }


        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "StatefulSet/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        
        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "DaemonSet/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "Job/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_name"]
          target_label  = "__tmp_fallback_name"
        }

        rule {
          source_labels = ["__tmp_deployment_name", "__tmp_fallback_name"]
          separator     = ""
          regex         = "^$"
          replacement   = "${2}"
          target_label  = "__tmp_deployment_name"
        }

        rule {
          source_labels = ["__tmp_deployment_name"]
          target_label  = "service_name"
        }

        rule {
          source_labels = ["__tmp_deployment_name"]
          target_label  = "deployment_name"
        }
      }

      // ── LOGGING ─────────────────────────────────────────────
      loki.write "default" {
        endpoint {
          url     = "http://loki.local/loki/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "myorg-production-productone",
          }
        }
      }

      loki.source.kubernetes "pods" {
        targets = discovery.relabel.pod_relabel.output
        forward_to = [loki.write.default.receiver]
      }

      // ── TRACING ─────────────────────────────────────────────
      otelcol.receiver.otlp "traces" {
        grpc {
          endpoint = "0.0.0.0:4317"
        }

        http {
          endpoint = "0.0.0.0:4318"
        }

        output {
          traces = [
            otelcol.connector.spanlogs.autologging.input,
            otelcol.processor.batch.traces.input,
          ]
          metrics = []
        }
      }

      // Batch processor
      otelcol.processor.batch "traces" {
        // timeout = "1s"
        // send_batch_size = 1024

        output {
          traces = [otelcol.exporter.otlp.traces.input]
          metrics = [otelcol.exporter.prometheus.tracemetrics.input]
        }
      }

      // Connector untuk span metrics
      otelcol.connector.spanmetrics "tracemetrics" {
        namespace = "traces.spanmetrics"
        
        dimension {
          name = "service.name"
        }
        dimension {
          name = "http.method"
        }
        dimension {
          name = "http.target"
        }
        dimension {
          name = "http.status_code"
        }
        dimension {
          name = "service.version"
        }

        histogram {
          explicit {
          }
        }
        
        exemplars {
          enabled = true
        }
        
        output {
          metrics = [otelcol.exporter.prometheus.tracemetrics.input]
        }
      }

      // Connector untuk service graph
      otelcol.connector.servicegraph "tracemetrics" {
        dimensions = [
          "service.name",
          "http.method",
          "http.target", 
          "http.status_code",
          "service.version",
        ]
        
        output {
          metrics = [otelcol.exporter.prometheus.tracemetrics.input]
        }
      }

      // Connector untuk auto-logging dari spans
      otelcol.connector.spanlogs "autologging" {
        spans = false
        roots = true
        processes = false
        span_attributes = [ "http.method", "http.target", "http.status_code", "service.name" ]
        
        overrides {
          trace_id_key = "traceId"
        }

        output {
          logs = [otelcol.exporter.loki.autologging.input]
        }
      }

      otelcol.exporter.otlp "traces" {
        client {
          endpoint = "tempo.local:8444"
          headers  = {
            "X-Scope-OrgID" = "myorg-production-productone",
          }

          tls {
            insecure = true
            insecure_skip_verify = true
          }
        }
      }

      otelcol.exporter.loki "autologging" {
        forward_to = [loki.process.autologging.receiver]
      }

      loki.process "autologging" {
        stage.json {
          expressions = { "body" = "" }
        }
        stage.output {
          source = "body"
        }
        forward_to = [loki.write.autologging.receiver]
      }

      loki.write "autologging" {
        external_labels = {
          job = "alloy-autologging",
        }

        endpoint {
          url = "http://loki.local/loki/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "myorg-production-productone",
          }
        }
      }

      otelcol.exporter.prometheus "tracemetrics" {
        forward_to = [prometheus.remote_write.mimir.receiver]
      }

      // ── METRICS ────────────────────────────────────────────

      discovery.kubernetes "nodes" {
        role = "node"
      }

      // Relabeling untuk kubelet metrics (cAdvisor built-in)
      discovery.relabel "kubelet_cadvisor" {
        targets = discovery.kubernetes.nodes.targets
        
        rule {
          source_labels = ["__meta_kubernetes_node_name"]
          target_label  = "node"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_node_address_InternalIP"]
          target_label  = "__address__"
          replacement   = "${1}:10250"
        }
        
        rule {
          target_label = "__metrics_path__"
          replacement  = "/metrics/cadvisor"
        }
      }

      // Relabeling untuk kubelet metrics
      discovery.relabel "kubelet" {
        targets = discovery.kubernetes.nodes.targets
        
        rule {
          source_labels = ["__meta_kubernetes_node_name"]
          target_label  = "node"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_node_address_InternalIP"]
          target_label  = "__address__"
          replacement   = "${1}:10250"
        }
        
        rule {
          target_label = "__metrics_path__"
          replacement  = "/metrics"
        }
      }

      // Scrape kubelet untuk node metrics
      prometheus.scrape "kubelet" {
        targets = discovery.relabel.kubelet.output
        
        scrape_interval = "30s"
        scrape_timeout  = "15s"
        scheme         = "https"
        
        bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        
        tls_config {
          ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          insecure_skip_verify = true
        }
        
        forward_to = [prometheus.remote_write.mimir.receiver]
      }

      // Scrape cAdvisor untuk container/pod metrics
      prometheus.scrape "cadvisor" {
        targets = discovery.relabel.kubelet_cadvisor.output
        
        scrape_interval = "30s"
        scrape_timeout  = "15s"
        scheme         = "https"
        
        bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        
        tls_config {
          ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          insecure_skip_verify = true
        }
        
        forward_to = [prometheus.remote_write.mimir.receiver]
      }

      prometheus.remote_write "mimir" {
        endpoint {
          url = "http://mimir.local/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "myorg-production-productone",
          }
          queue_config {
            capacity          = 10000
            max_shards        = 200
            min_shards        = 1
            max_samples_per_send = 5000
            batch_send_deadline = "5s"
          }
        }
      }

# NOTE: https://medium.com/@martinko.komorny/grafana-agent-alloy-loki-minio-grafana-in-kubernetes-4fe4894b1341

loki:
  schemaConfig:
    configs:
      - from: "2025-01-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  ingester:
    chunk_encoding: snappy
  querier:
    # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
    max_concurrent: 4
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true

  storage:
    type: s3
    use_thanos_objstore: false
    bucketNames:
      chunks: grafana-loki-chunks
      ruler: grafana-loki-ruler
      admin: grafana-loki-admin
    s3: 
      # s3 URL can be used to specify the endpoint, access key, secret key, and bucket name this works well for S3 compatible storages or are hosting Loki on-premises and want to use S3 as the storage backend. Either use the s3 URL or the individual fields below (AWS endpoint, region, secret).
      # s3: s3://access_key:secret_access_key@custom_endpoint/bucket_name
      endpoint: host.docker.internal:9000
      region: us-east-1
      accessKeyId: default
      secretAccessKey: mypswd123
      insecure: true # minio/localstack = true, AWS S3 = false
      s3ForcePathStyle: true # minio/localstack = true, AWS S3 = false
      signatureVersion: v4  # safe default
      disable_dualstack: true
      backoff_config: {}
      http_config:
        idle_conn_timeout: 90s
        response_header_timeout: 0s

deploymentMode: Distributed

distributor:
  replicas: 2
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
  maxUnavailable: 2

ingester:
  replicas: 2 # To ensure data durability with replication
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
  maxUnavailable: 2
  zoneAwareReplication:
    enabled: false

compactor:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2

querier:
  replicas: 1 # Improve query performance via parallelism
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
  maxUnavailable: 2

queryFrontend:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
  maxUnavailable: 1

queryScheduler:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2

indexGateway:
  replicas: 1
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
  maxUnavailable: 2
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 400m
      memory: 512Mi

bloomPlanner:
  replicas: 0

bloomBuilder:
  replicas: 0

bloomGateway:
  replicas: 0

backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0

# This exposes the Loki gateway so it can be written to and queried externaly
gateway:
  replicas: 2
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
  service:
    type: LoadBalancer

# The Loki canary pushes logs to and queries from this loki installation to test, that it's working correctly
lokiCanary:
  enabled: false

# Disabling lokiCanary require test.enabled=false 
test:
  enabled: false

# Minio for storage
minio:
  enabled: false

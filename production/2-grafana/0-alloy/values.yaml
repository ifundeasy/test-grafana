replicaCount: 1

controller:
  type: deployment

image:
  repository: grafana/alloy
  tag: latest
  pullPolicy: IfNotPresent

alloy:
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  extraPorts:
    - name: grpc-otlp
      port: 4317
      targetPort: 4317
      protocol: TCP
    - name: http-otlp
      port: 4318
      targetPort: 4318
      protocol: TCP

  configMap:
    create: true
    name: alloy-config
    content: |
      livedebugging {
        enabled = true
      }

      logging {
        level  = "info"
        format = "logfmt"
      }

      discovery.kubernetes "pods" {
        role = "pod"

        namespaces {
          names = ["grafana"]
        }
      }

      discovery.relabel "pod_relabel" {
        targets = discovery.kubernetes.pods.targets

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "ReplicaSet/(.+)"
          target_label  = "__tmp_replicaset_name"
          replacement   = "${1}"
        }
        
        rule {
          source_labels = ["__tmp_replicaset_name"]
          regex         = "(.+)-[a-z0-9]+"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "Deployment/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }


        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "StatefulSet/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        
        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "DaemonSet/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_kind", "__meta_kubernetes_pod_controller_name"]
          separator     = "/"
          regex         = "Job/(.+)"
          target_label  = "__tmp_deployment_name"
          replacement   = "${1}"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_controller_name"]
          target_label  = "__tmp_fallback_name"
        }

        rule {
          source_labels = ["__tmp_deployment_name", "__tmp_fallback_name"]
          separator     = ""
          regex         = "^$"
          replacement   = "${2}"
          target_label  = "__tmp_deployment_name"
        }

        rule {
          source_labels = ["__tmp_deployment_name"]
          target_label  = "service_name"
        }

        rule {
          source_labels = ["__tmp_deployment_name"]
          target_label  = "deployment_name"
        }
      }

      discovery.relabel "metrics" {
         targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_port"]
          target_label  = "__meta_kubernetes_pod_container_port_number"
          action = "keepequal"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_port_number"]
          regex = ""
          action = "drop"
        }    
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path",]
          target_label  = "__metrics_path__"
          separator = ""
          action = "replace"
        }
      }

      // ── LOGGING ─────────────────────────────────────────────
      loki.write "default" {
        endpoint {
          url     = "http://lk-loki-gateway/loki/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "myorg-production-grafana",
          }
        }
      }

      loki.source.kubernetes "pods" {
        targets    = discovery.relabel.pod_relabel.output
        forward_to = [loki.write.default.receiver]
      }

      // ── TRACING ─────────────────────────────────────────────
      otelcol.receiver.otlp "traces" {
        grpc {
          endpoint = "0.0.0.0:4317"
        }

        http {
          endpoint = "0.0.0.0:4318"
        }

        output {
          traces = [otelcol.processor.attributes.traces.input]
        }
      }

      otelcol.processor.attributes "traces" {
        action {
          key    = "business-unit"
          value  = "product-two"
          action = "insert"
        }

        // Replace service.name with deployment name from Kubernetes metadata
        action {
          key    = "service.name"
          from_attribute = "pods.deployment.name"
          action = "upsert"
        }

        output {
          traces = [otelcol.processor.batch.traces.input]
        }
      }

      otelcol.exporter.otlp "traces" {
        client {
          endpoint = "tp-tempo-distributor:4317"
          headers  = {
            "X-Scope-OrgID" = "myorg-production-grafana",
          }

          tls {
            insecure             = true
            insecure_skip_verify = true
          }
        }
      }

      otelcol.processor.batch "traces" {
        output {
          traces = [otelcol.exporter.otlp.traces.input]
        }
      }

      // ── METRICS ────────────────────────────────────────────
      prometheus.scrape "pods" {
        clustering {
            enabled = true
        }
        targets    = discovery.relabel.metrics.output
        forward_to = [prometheus.remote_write.mimir.receiver]

        scrape_interval = "30s"
      }

      prometheus.remote_write "mimir" {
        endpoint {
          url = "http://mr-mimir-distributor:8080/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "myorg-production-grafana",
          }
        }
      }
